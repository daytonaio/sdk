name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on tags starting with 'v'
  workflow_dispatch:
    inputs:
      package_version:
        description: 'Version to publish (e.g., vX.Y, vX.Y.Z, vX.Y.ZaN, vX.Y.ZbN, vX.Y.ZrcN)'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # Required for Trusted Publisher authentication

    defaults:
      run:
        working-directory: packages/python  # Set working directory

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Print Head Commit SHA
        run: |
          echo "Head Commit SHA: ${{ github.sha }}"

      - name: Validate And Extract Version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            INPUT_VALUE="${{ github.event.inputs.package_version }}"
          else
            INPUT_VALUE="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "Tag/input value: $INPUT_VALUE"

          # Validate tag/input format: vX.Y.Z, vX.Y, vX.Y.ZaN, vX.Y.ZbN, vX.Y.ZrcN
          if [[ ! "$INPUT_VALUE" =~ ^v[0-9]+\.[0-9]+(\.[0-9]+)?(a[0-9]+|b[0-9]+|rc[0-9]+)?$ ]]; then
            echo "Invalid tag/input format: $INPUT_VALUE"
            echo "Allowed formats: vX.Y, vX.Y.Z, vX.Y.ZaN, vX.Y.ZbN, vX.Y.ZrcN"
            exit 1
          fi

          PACKAGE_VERSION="${INPUT_VALUE#v}"
          echo "PACKAGE_VERSION=$PACKAGE_VERSION"
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install build tools
        run: |
          pip install --upgrade build twine

      - name: Build the package
        run: |
          python3 -m build

      - name: Publish to PyPI using Trusted Publisher
        run: |
          twine upload dist/* --verbose

      - name: Display Published Package Info
        run: |
          PACKAGE_NAME=$(python3 -c "import tomli; from pathlib import Path; \
            content = Path('pyproject.toml').read_text(); \
            print(tomli.loads(content)['project']['name'])")

          echo "Successfully published $PACKAGE_NAME==$PACKAGE_VERSION to PyPI!"
          echo "Install it using:"
          echo -e "\tpip install $PACKAGE_NAME==$PACKAGE_VERSION"
